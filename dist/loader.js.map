{"version":3,"sources":["../src/loader.ts"],"names":["PrevalError","Error","defaultExtensions","defaultTsConfigFile","isRecord","something","Array","isArray","readJson","filename","require","undefined","fileExists","fs","existsSync","_prevalLoader","_","resource","options","extensions","tsConfigFile","configLoaderResult","configLoaderSuccessResult","resultType","matchPath","absoluteBaseUrl","paths","moduleResolver","resolvePath","sourcePath","currentFile","opts","caller","isServer","presets","targets","plugins","rootMode","ignore","compact","data","mod","JSON","stringify","default","e","console","error","stack","loader","content","callback","async","cacheable","toString","resourcePath","then","result","catch"],"mappings":"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","sourcesContent":["import fs from 'fs';\nimport type webpack from 'webpack';\nimport requireFromString from 'require-from-string';\n// @ts-expect-error\nimport { resolvePath as defaultResolvePath } from 'babel-plugin-module-resolver';\nimport { getOptions } from 'loader-utils';\nimport { createMatchPath, loadConfig } from 'tsconfig-paths';\nimport isSerializable from './is-serializable';\n// @ts-expect-error\nimport register, { revert } from '@babel/register';\n\nclass PrevalError extends Error {}\n\ninterface PrevalLoaderOptions {\n  extensions?: string[];\n  tsConfigFile?: string;\n}\n\nconst defaultExtensions = ['.js', '.jsx', '.ts', '.tsx'];\nconst defaultTsConfigFile = \"tsconfig.json\";\n\nconst isRecord = (something: unknown): something is Record<string, unknown> =>\n  typeof something === 'object' && !!something && !Array.isArray(something);\n\nconst readJson = (filename: string) => {\n  try {\n    return require(filename);\n  } catch {\n    return undefined;\n  }\n};\n\nconst fileExists = (filename: string) => {\n  try {\n    return fs.existsSync(filename);\n  } catch {\n    return false;\n  }\n};\n\nexport async function _prevalLoader(\n  _: string,\n  resource: string,\n  options: PrevalLoaderOptions\n) {\n  let { extensions = defaultExtensions, tsConfigFile } = options;\n  tsConfigFile = tsConfigFile ?? defaultTsConfigFile;\n\n  const configLoaderResult = loadConfig(tsConfigFile);\n\n  const configLoaderSuccessResult =\n    configLoaderResult.resultType === 'failed' ? null : configLoaderResult;\n\n  const matchPath =\n    configLoaderSuccessResult &&\n    createMatchPath(\n      configLoaderSuccessResult.absoluteBaseUrl,\n      configLoaderSuccessResult.paths\n    );\n\n  const moduleResolver =\n    configLoaderSuccessResult &&\n    ([\n      'module-resolver',\n      {\n        extensions,\n        resolvePath: (sourcePath: string, currentFile: string, opts: any) => {\n          if (matchPath) {\n            try {\n              return matchPath(sourcePath, readJson, fileExists, extensions);\n            } catch {\n              return defaultResolvePath(sourcePath, currentFile, opts);\n            }\n          }\n\n          return defaultResolvePath(sourcePath, currentFile, opts);\n        },\n      },\n    ] as const);\n\n  register({\n    // this is used by `next/babel` preset to conditionally remove loaders.\n    // without it, it causes the dreaded `e.charCodeAt is not a function` error.\n    // see:\n    // - https://github.com/ricokahler/next-plugin-preval/issues/66\n    // - https://github.com/vercel/next.js/blob/37d11008250b3b87dfa4625cd228ac173d4d3563/packages/next/build/babel/preset.ts#L65\n    caller: { isServer: true },\n    presets: ['next/babel', ['@babel/preset-env', { targets: 'node 12' }]],\n    plugins: [\n      // conditionally add\n      ...(moduleResolver ? [moduleResolver] : []),\n    ],\n    rootMode: 'upward-optional',\n    // TODO: this line may cause performance issues, it makes babel compile\n    // things `node_modules` however this is currently required for setups that\n    // include the use of sym-linked deps as part of workspaces (both yarn and\n    // npm)\n    ignore: [],\n    // disables the warning \"Babel has de-optimized the styling of...\"\n    compact: true,\n    extensions,\n  });\n\n  const data = await (async () => {\n    try {\n      const mod = requireFromString(\n        `require('next');\\nmodule.exports = require(${JSON.stringify(\n          resource\n        )})`,\n        `${resource}.preval.js`\n      );\n\n      if (!mod.default) {\n        throw new PrevalError(\n          'No default export. Did you forget to `export default`?'\n        );\n      }\n\n      return await mod.default;\n    } catch (e) {\n      if (isRecord(e) && 'stack' in e) {\n        // TODO: use the webpack logger. i tried this and it didn't output anything.\n        console.error('[next-plugin-preval]', e.stack);\n      }\n\n      throw new PrevalError(\n        `Failed to pre-evaluate \"${resource}\". ${e} See above for full stack trace.`\n      );\n    } finally {\n      revert();\n    }\n  })();\n\n  isSerializable(resource, data);\n\n  // NOTE we wrap in JSON.parse because that's faster for JS engines to parse\n  // over javascript. see here https://v8.dev/blog/cost-of-javascript-2019#json\n  //\n  // We wrap in JSON.stringify twice. Once for a JSON string and once again for\n  // a JSON string that can be embeddable in javascript.\n  return `module.exports = JSON.parse(${JSON.stringify(JSON.stringify(data))})`;\n}\n\nconst loader = function (\n  this: webpack.LoaderContext<PrevalLoaderOptions>,\n  content: string\n) {\n  const callback = this.async();\n  const options = getOptions(this);\n  this.cacheable(false);\n\n  if (!callback) {\n    throw new PrevalError(\n      'Async was not supported by webpack. Please open an issue in next-plugin-preval.'\n    );\n  }\n\n  _prevalLoader(content.toString(), this.resourcePath, options)\n    .then((result) => {\n      callback(null, result);\n    })\n    .catch((e) => {\n      callback(e);\n    });\n};\n\nexport default loader;\n"],"file":"loader.js"}